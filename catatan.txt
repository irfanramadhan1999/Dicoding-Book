LATIHAN AJAX 2 METODE XHR DAN FETCH :
1. XHR :
== Mendapatkan daftar buku ==
const getBook = () => {
  // membuat instance dari XMLHttpRequest
  const xhr = new XMLHttpRequest();
 
  //menetapkan callback jika response sukses dan error
  xhr.onload = function () {
    const responseJson = JSON.parse(this.responseText);
    
    if (responseJson.error) {
      showResponseMessage(responseJson.message);
    } else {
      renderAllBooks(responseJson.books);
    }
  };
 
  xhr.onerror = function () {
    showResponseMessage();
  };
 
  // Membuat GET request dan menetapkan target URL
  xhr.open('GET', `${baseUrl}/list`);
 
  // Mengirimkan request
  xhr.send();
};

===================================

== Melengkapi Fungsi insertBook ==
  const insertBook = (book) => {
    // membuat instance dari XMLHttpRequest
    const xhr = new XMLHttpRequest();

    // menetapkan callback jika response sukses dan error
    xhr.onload = function () {
      const responseJson = JSON.parse(this.responseText);
      showResponseMessage(responseJson.message);
      getBook();
    };

    xhr.onerror = function () {
      showResponseMessage();
    };

    // membuat POST request dan menetapkan target URL
    xhr.open("POST", `${baseUrl}/add`);

    // Menetapkan properti Content-Type dan X-Auth-Token pada header request
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.setRequestHeader("X-Auth-Token", "12345");

    //mengirimkan request dan mengisipkan JSON.stringify(book) pada body
    xhr.send(JSON.stringify(book));
  };

===================================

== MENGHAPUS BUKU ==
 const removeBook = (bookId) => {
    // Membuat instance dari XMLHttpRequest
    const xhr = new XMLHttpRequest();

    //menetapkan callback jika response sukses dan error
    xhr.onload = function () {
      const responseJson = JSON.parse(this.responseText);
      showResponseMessage(responseJson.message);
      getBook();
    };

    xhr.onerror = function () {
      showResponseMessage();
    };

    // Membuat DELETE request dan menetapkan target URL
    xhr.open("DELETE", `${baseUrl}/delete/${bookId}`);

    // Mementapkan properti Content-Type dan X-Auth-Token pada Header request
    xhr.setRequestHeader("X-Auth-Token", "12345");

    // Mengirimkan request
    xhr.send();
  };

===================================

== MENGUPDATE BUKU == 
  const updateBook = (book) => {
    // Membuat instance dari XMLHttpRequest
    const xhr = new XMLHttpRequest();

    //menetapkan callback jika response sukses dan error
    xhr.onload = function () {
      const responseJson = JSON.parse(this.responseText);
      showResponseMessage(responseJson.message);
      getBook();
    };

    xhr.onerror = function () {
      showResponseMessage();
    };

    // Membuat PUT request dan menetapkan target URL
    xhr.open("PUT", `${baseUrl}/edit/${book.id}`);

    // Mementapkan properti Content-Type dan X-Auth-Token pada Header request
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.setRequestHeader("X-Auth-Token", "12345");

    // Mengirimkan request dan menyisipkan JSON.stringify(book) pada body
    xhr.send(JSON.stringify(book));
  };

===================================

